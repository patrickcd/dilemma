# Examples demonstrating JQ expression capabilities in angle brackets

- name: basic_jq_access
  category: jq_basics
  description: "Basic JQ expression to access a nested property"
  expression: "<.user.profile.name> == 'Alice'"
  expected: true
  context:
    user:
      profile:
        name: "Alice"
        age: 32
      settings:
        notifications: true

- name: jq_array_access
  category: jq_arrays
  description: "Access elements in an array using JQ indexing"
  expression: "<.team[1].role> == 'developer'"
  expected: true
  context:
    team:
      - name: "Bob"
        role: "manager"
      - name: "Charlie"
        role: "developer"
      - name: "Diana"
        role: "designer"

- name: jq_array_length
  category: jq_arrays
  description: "Check array length using JQ pipe function"
  expression: "<.products | length> > 2"
  expected: true
  context:
    products:
      - id: 101
        name: "Laptop"
      - id: 102
        name: "Phone"
      - id: 103
        name: "Tablet"

- name: jq_filter_array
  category: jq_filtering
  description: "Filter array elements based on a condition"
  expression: "<.orders[] | select(.status == \"completed\") | .id> == 1003"
  expected: true
  context:
    orders:
      - id: 1001
        status: "pending"
      - id: 1002
        status: "processing"
      - id: 1003
        status: "completed"

- name: jq_with_regular_expression
  category: jq_mixed
  description: "Combine JQ with regular Dilemma expressions"
  expression: "<.user.membership.level> == 'gold' and /user/account/active == true"
  expected: true
  context:
    user:
      membership:
        level: "gold"
        since: "__LAST_WEEK__"
      account:
        active: true
        credits: 500

- name: jq_array_any_match
  category: jq_arrays
  description: "Check if any array element matches a condition"
  expression: "<.users[] | select(.role == \"admin\") | .name> == 'Eva'"
  expected: true
  context:
    users:
      - name: "Dave"
        role: "user"
      - name: "Eva"
        role: "admin"
      - name: "Frank"
        role: "user"

- name: jq_complex_transformation
  category: jq_advanced
  description: "Complex data transformation with JQ"
  expression: "<.departments[] | select(.name == \"Engineering\").employees | map(.salary) | add / length> > 75000"
  expected: true
  context:
    departments:
      - name: "Marketing"
        employees:
          - name: "Grace"
            salary: 65000
          - name: "Henry"
            salary: 68000
      - name: "Engineering"
        employees:
          - name: "Isla"
            salary: 78000
          - name: "Jack"
            salary: 82000
          - name: "Kate"
            salary: 80000

- name: jq_conditional_with_dates
  category: jq_with_dates
  description: "Use JQ to extract a date for comparison"
  expression: "<.project.milestones[] | select(.name == \"beta\").date> is past"
  expected: true
  context:
    project:
      name: "Product Launch"
      milestones:
        - name: "alpha"
          date: "__NEXT_MONTH__"
        - name: "beta"
          date: "__YESTERDAY__"
        - name: "release"
          date: "__IN_TWO_HOURS__"

- name: jq_contains_check
  category: jq_advanced
  description: "Check if an array contains a specific value"
  expression: "<.user.permissions | contains([\"edit\"])>"
  expected: true
  context:
    user:
      id: 1234
      name: "Lucy"
      permissions: ["read", "edit", "share"]

- name: jq_conditional_object_construction
  category: jq_advanced
  description: "Use JQ to conditionally create and check an object"
  expression: "<if .user.premium then {access: \"full\"} else {access: \"limited\"} end | .access> == 'full'"
  expected: true
  context:
    user:
      premium: true
      account_type: "business"
