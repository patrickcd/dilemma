[build-system]
requires = [
    "setuptools",
    "setuptools-scm",
]
build-backend = "setuptools.build_meta"

[project]
name = "dilemma"
authors = [
    {name = "Patrick Dobbs", email = "patrick.dobbs@gmail.com"},
]
description = "This is an expression language python package."
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
]
dependencies = [
    "lark",
]
dynamic = ["version"]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
    "codecov",
    "pre-commit",
]
doc = [
    "mkdocs",
    "mkdocstrings",
    "mkdocstrings[python]",
    "mkdocs-material",
    "Pygments",
]
dev = [
    "black",
    "isort",
    "mypy",
    "pre-commit",
    "ruff",
]
all = ["dilemma[test,doc,dev]"]

[project.scripts]
dilemma = "dilemma.cli:evaluate_expression"

[tool.setuptools]
platforms = ["unix", "linux", "osx", "cygwin", "win32"]
packages = ["dilemma"]  # optional

[tool.setuptools.dynamic]
version = {attr = "dilemma.__version__"}

[tool.pytest.ini_options]
minversion = "7.3"
testpaths = "tests"

[tool.coverage.run]
branch = true
parallel = true
omit = [
    "setup.py",
    "dilemma/__init__.py",
    "dilemma/version.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.coverage.paths]
source = [
    "dilemma/*",
]

[tool.coverage.html]
directory = "reports"

######## Tools


[tool.ruff]
target-version = "py312"
extend-exclude = ["docs", "test", "tests"]
line-length = 90

[tool.ruff.lint]
select = ["F", "E"]
unfixable = []

[tool.ruff.lint.isort]
force-single-line = true
force-sort-within-sections = false
lines-after-imports = 2

[tool.ruff.lint.mccabe]
max-complexity = 24

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = false
ignore-fully-untyped = false

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
# Platform configuration
python_version = "3.12"
#

[tool.pyright]
pythonVersion = "3.10"
typeCheckingMode = "basic"
# enable subset of "strict"
reportDuplicateImport = true
reportInvalidStubStatement = true
reportOverlappingOverload = true
reportPropertyTypeMismatch = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
reportUntypedNamedTuple = true
reportUnusedImport = true
# disable subset of "basic"
reportGeneralTypeIssues = true
reportMissingModuleSource = false
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalMemberAccess = true
reportOptionalOperand = true
reportOptionalSubscript = true
reportPrivateImportUsage = true
reportUnboundVariable = true
